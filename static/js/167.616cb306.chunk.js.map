{"version":3,"file":"static/js/167.616cb306.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/contact-form/ContactForm.module.css?a5da","redux/contacts/selectors.js","components/contact-form/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contact-list/ContactList.module.css?04e8","webpack://goit-react-hw-08-phonebook/./src/components/contact/Contacts.module.css?7ede","components/contact/Contact.jsx","components/contact-list/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"ContactForm_label__c5nUX\",\"input\":\"ContactForm_input__3YJ5n\",\"button\":\"ContactForm_button__5CdC1\",\"error\":\"ContactForm_error__4y68f\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filters) => {\n    if (filters !== '') {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filters.toLowerCase())\n      );\n    }\n    return contacts;\n  }\n);\n","import { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = values => {\n    const { name, phone } = values;\n   \n    if (\n      (contacts.length > 0) &\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contacts!`);\n    } else {\n      dispatch(addContact({name, phone}));\n    }\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    phone: Yup.string()\n      .matches(\n        /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Phone number is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{ name: '', phone: '' }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { resetForm }) => {\n        handleSubmit(values);\n        resetForm();\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form className={css.form} autoComplete=\"off\">\n          <label className={css.label}>\n            Name\n            <Field type=\"text\" name=\"name\" className={css.input} required />\n            {errors.name && touched.name && (\n              <div className={css.error}>{errors.name}</div>\n            )}\n          </label>\n          <label className={css.label}>\n            Number\n            <Field type=\"tel\" name=\"phone\" className={css.input} required />\n            {errors.number && touched.number && (\n              <div className={css.error}>{errors.number}</div>\n            )}\n          </label>\n          <button type=\"submit\" className={css.button}>\n            Add contact\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter-description\":\"Filter_filter-description__3b6b3\",\"filter-input\":\"Filter_filter-input__PKXqW\",\"label\":\"Filter_label__IWv91\"};","import { Formik, Field, Form } from 'formik';\nimport * as yup from 'yup';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlise';\n\nconst FilterSchema = yup.object().shape({\n  filter: yup.string().required(),\n});\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <>\n      <Formik initialValues={{ filter: '' }} validationSchema={FilterSchema}>\n        {({ values, handleChange }) => (\n          <Form autoComplete=\"off\">\n            <label className={css.label}>\n              Find contacts by name\n              <Field\n                name=\"filter\"\n                type=\"search\"\n                value={values.filter}\n                onChange={evt => {\n                  handleChange(evt);\n                  handleChangeFilter(evt);\n                }}\n                className={css['filter-input']}\n              />\n            </label>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__w1+5g\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Contacts_item__sa+w5\",\"button\":\"Contacts_button__qe2gC\"};","import { useDispatch } from 'react-redux';\nimport css from './Contacts.module.css'\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\n\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  \n  return (\n    <li key={contact.id} className={css.item}>\n      {contact.name}: {contact.phone}\n      <button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Contact;\n","import css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts/selectors';\nimport Contact from 'components/contact/Contact';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(getVisibleContacts);\n \n  return (\n    <ul className={css.list}>\n      {visibleContacts.map(contact => (\n        <Contact contact={contact} key={contact.id} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React, { useEffect } from 'react';\nimport ContactForm from 'components/contact-form/ContactForm';\nimport Filter from 'components/filter/Filter';\nimport ContactList from 'components/contact-list/ContactList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getIsLoading, getError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <>\n        {isLoading && !error && <b>Request in progress...</b>}\n        {contacts?.length > 0 && (\n          <>\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n          </>\n        )}\n      </>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getVisibleContacts","createSelector","filter","filters","contact","name","toLowerCase","includes","useSelector","dispatch","useDispatch","validationSchema","Yup","matches","required","phone","initialValues","onSubmit","values","resetForm","length","some","alert","addContact","handleSubmit","errors","touched","className","css","autoComplete","type","number","FilterSchema","yup","shape","handleChange","value","onChange","evt","setFilter","target","handleChangeFilter","onClick","deleteContact","id","visibleContacts","map","Contacts","useEffect","fetchContacts"],"sourceRoot":""}